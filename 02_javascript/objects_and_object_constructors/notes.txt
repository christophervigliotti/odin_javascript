/*
JavaScript Course
    Introduction
        How This Course Will Work
            A Quick Review
                rewiewed 
                    https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics
                    https://learnxinyminutes.com/docs/javascript/ 
    Organizing Your JavaScript Code
        Intro
        Objects and Object Constructors   
            Intro
                // object literal syntax ('the best way to define objects')
                const myObject = {
                    property: 'value',
                    anotherProperty: 77,
                    "verbose property": function() {
                        // do stuff
                    }
                }

                // 2 ways of getting info out of an object
                    // dot notation
                    myObject.property; // 'value'

                    // bracket notation
                    myObject['verbose property']; // [Function]
                    // bracket notation required here bc property name has a space in it

                    // dot notation is preferred for the above, but bracket notation is required here...
                    const variable = 'property';
                    myObject.variable; // undefined
                    myObject[variable]; // resolves to 'myObject.property' and returns 'value'
            Lesson Overview
                will learn 
                    * how to write an object constructuctor and instantiate the object
                    * describe what a prototype is and how it can be used
                    * explain prototypal inheritance 
                    * understand the basic dos and donts of prototypal inheritance 
                    * explain what the this keyword is
            Objects as a design pattern              
                // example one
                const playerOneName = "tim";
                const playerTwoName = "jenn";
                const playerOneMarker = "X";
                const playerTwoMarker = "O";

                // example two
                const playerOne = {
                name: "tim",
                marker: "X"
                };

                const playerTwo = {
                name: "jenn",
                marker: "O"
                };           

                // resume at https://www.theodinproject.com/lessons/node-path-javascript-objects-and-object-constructors#objects-as-a-design-pattern
            Object constructors
                function Player(name, marker){
                    this.name = name;
                    this.marker = marker;
                    this.sayName = function(){
                        console.log(this.name);
                    }
                }
                const player = new Player('steve','x');
                console.log(player.name); // 'steve'
                // see also
                player.sayName();
            Exercise
                see book.js
            The prototype
                All objects in js have a prototype...
                ...the prototype is another object...
                ...that the original object inherits from and has access to al of it's prototype's methods and properties
                wha?!
            Accessing an object's prototype
                [book.js]
                All objects in js have a prototype...
                    * you can check the obejct's prototype by using Object.getPrototypeOf() 
                    * Object.getPrototypeOf(player1);
                ...the prototype is another object...
                    * the VALUE of the Object Constructor's .prototype property contains the prototype object
                    * the REFERENCE to this value of Player.prototype is stored in every Player object, every time a Player obect is created
                    * Hence you get a true value returned for Object.getPrototypeOf(hobbit) === Book.prototype
                ...that the original object inherits from and has access to al of it's prototype's methods and properties
                    * so any properties or methods defined ON THE PROTOTYPE will be available to the created objects (instances)
            Prototypal inheritance 
                what is the purpose of defining propeties andfunctions on the prototype?
                    1. define properties and functions common among all objects on the prototype
                        to save mmory
                    2. it is a type of inheritance 
                    [personplayer.js]
                considerations
                    the prototype chain has to be set up via setPrototypeOf() before creating any objects
                    this doesn't Work
                        Player.prototype = Person.prototype
            Assignments
                01.01
                    https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript
                01.02
                    https://javascript.info/prototype-inheritance 
                02.01
                    'this' https://www.javascripttutorial.net/javascript-this/
                03
                    https://medium.com/@eamonocallaghan/prototype-vs-proto-vs-prototype-in-javascript-6758cadcbae8
            Knowledge Check Questions
                How do you write an object constructor and instantiate the object?
                    function Player(name, marker){
                        this.name = name;
                        this.marker = marker;
                    }
                    const player2 = new Player('Grimace', '0');
                What is a prototype and how can it be used?
                    It's the parent object, and it allows for inheritance (and saves memory)
                What is prototypal inheritance?
                    Where you inherit methods and properties from the parent
                What are the basic do’s and don’t’s of prototypal inheritance?
                    dont
                        Using setPrototypeOf() after objects have already been created can result in performance issues.
                How does this behave in different situations?
                    this in a function is limited to that function, and refers to itself
                    this 
            
